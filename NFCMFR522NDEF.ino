#include <SPI.h>
#include <MFRC522.h>

#define RST_PIN    9   // 
#define SS_PIN    10    //

MFRC522 mfrc522(SS_PIN, RST_PIN); // Create MFRC522 instance
#include "NDEF.h"

#define PAYLOAD_SIZE 236
uint8_t payload[PAYLOAD_SIZE] = {};

void setup(void)
{
  Serial.begin(9600);
  pinMode(SS_PIN, OUTPUT);
  pinMode(RST_PIN, OUTPUT);
  while (!Serial);    // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
  SPI.begin();      // Init SPI bus
  mfrc522.PCD_Init();   // Init MFRC522
}

void loop(void)
{
  memset(payload, 0, PAYLOAD_SIZE);

  //memcpy(payload, "www.odopod.com", 14);
  //uint8_t len = NDEF().encode_URI(0x3, payload);

  //memcpy(payload, "this is some text", 17);
  //uint8_t len = NDEF().encode_TEXT((uint8_t *)"en", payload);

  //static uint8_t bitmapdata[220] = {0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x12, 0x00, 0x12, 0x00, 0xb3, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xff, 0xff, 0x99, 0xff, 0xcc, 0x99, 0xff, 0xcc, 0x66, 0xff, 0xcc, 0x33, 0xcc, 0x99, 0x33, 0xcc, 0x99, 0x00, 0x99, 0x66, 0x00, 0x66, 0x66, 0x00, 0x66, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0x00, 0x21, 0xf9, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x12, 0x00, 0x00, 0x04, 0x7c, 0x10, 0xc8, 0x99, 0x6a, 0x45, 0x33, 0x53, 0x74, 0x8a, 0x37, 0x07, 0x92, 0x68, 0x52, 0x72, 0x10, 0x43, 0x9a, 0x12, 0x20, 0x96, 0x25, 0x45, 0x2a, 0x04, 0xb4, 0xb0, 0x1a, 0x63, 0x79, 0xc8, 0x74, 0xaf, 0x12, 0x87, 0x1c, 0x02, 0x35, 0x53, 0x28, 0x68, 0xc6, 0x1b, 0xc6, 0x94, 0x42, 0x1e, 0x03, 0x46, 0xdb, 0x00, 0x58, 0x31, 0x0c, 0x66, 0xd0, 0x67, 0xf4, 0x56, 0x1d, 0xf4, 0x8c, 0xce, 0x5f, 0xa1, 0x8b, 0xed, 0x09, 0xa4, 0xab, 0x71, 0xc2, 0x40, 0xac, 0xa9, 0x7e, 0xac, 0xca, 0x69, 0xa0, 0x78, 0xbf, 0x15, 0x04, 0x2a, 0x00, 0xc1, 0xa6, 0xdb, 0xe9, 0x79, 0x06, 0x2e, 0x26, 0x79, 0x74, 0x46, 0x87, 0x79, 0x7a, 0x12, 0x7c, 0x89, 0x8d, 0x89, 0x38, 0x1a, 0x26, 0x6c, 0x8e, 0x20, 0x39, 0x91, 0x1c, 0x06, 0x99, 0x2d, 0x96, 0x24, 0x00, 0x16, 0x16, 0x24, 0x11, 0x00, 0x3b};
  //memcpy(payload, bitmapdata, 220);
  //uint8_t len = NDEF().encode_MIME((uint8_t *)"image/gif", payload, 220);

   String vcff= "BEGIN:VCARD\nVERSION:2.1\nN:Coleman;Don;;;\nFN:Don Coleman\nORG:Chariot Solutions;\nURL:http://chariotsolutions.com\nTEL;WORK:215-358-1780\nEMAIL;WORK:info@chariotsolutions.com\nEND:VCARD";

   memcpy(payload, "BEGIN:VCARD\nVERSION:2.1\nN:Coleman;Don;;;\nFN:Don Coleman\nORG:Chariot Solutions;\nURL:http://chariotsolutions.com\nTEL;WORK:215-358-1780\nEMAIL;WORK:info@chariotsolutions.com\nEND:VCARD", vcff.length());
  uint8_t len = NDEF().encode_MIME((uint8_t *)"text/vcard", payload,vcff.length());



  if ( ! mfrc522.PICC_IsNewCardPresent())
    return;

  // Select one of the cards
  if ( ! mfrc522.PICC_ReadCardSerial())
    return;

  boolean success = writePayload(payload, len);
  Serial.println(success ? "success" : "fail");
  delay(5000);
}

boolean writePayload (uint8_t *payload, uint8_t length)
{
  return ultralight_writePayload(payload, length);
}

boolean ultralight_writePayload (uint8_t *payload, uint8_t len)
{
  const uint8_t zero[4] = {0x00, 0x00, 0x00, 0x00};

  uint8_t block_buffer[4] = {};
  uint8_t start_block = 4;

  uint8_t position = 0;
  uint8_t block_count = start_block;
  uint8_t byte_count = 0;

  while (position < len) {
    memcpy (block_buffer + byte_count, payload + position, 1);

    byte_count ++;
    position ++;
    if (byte_count == 4 ) {
      //end of block
      byte_count = 0;

      // write block
      //if (!ultralight_writeMemoryBlock(block_count, block_buffer))//#####################################33
      //return false;
      mfrc522.MIFARE_Ultralight_Write(block_count, block_buffer, 4);

      //reset
      memcpy(block_buffer, zero, 16);
      block_count ++;
    }

  }
  //write any remaining buffer
  if (byte_count > 0) {
    //if (!ultralight_writeMemoryBlock(block_count, block_buffer))//#############################################3
    //return false;
    mfrc522.MIFARE_Ultralight_Write(block_count, block_buffer, 4);
  }

  return true;
}
